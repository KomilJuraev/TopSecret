{"ast":null,"code":"let BASE_URL=\"\";if(process.env.NODE_ENV===\"development\"){console.log(process.env);BASE_URL=\"http://localhost:5000/api\";}else if(process.env.NODE_ENV===\"production\"){BASE_URL=\"https://topsecret-l2s9.onrender.com\";}export async function registerUser(email,password){const requestBody={email:email,password:password};try{const response=await fetch(\"\".concat(BASE_URL,\"/users/register\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});const data=await response.json();return data;}catch(error){return error;}}export async function loginUser(email,password){const requestBody={email:email,password:password};try{const response=await fetch(\"\".concat(BASE_URL,\"/users/login\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});const data=await response.json();return data;}catch(error){return error;}}export async function getSecretsForUser(userId){try{const response=await fetch(\"\".concat(BASE_URL,\"/secrets/\").concat(userId));const data=await response.json();return data;}catch(error){return error;}}export async function addSecretForUser(userId,secret){const requestBody={userId:userId,secretInfo:secret};try{const response=await fetch(\"\".concat(BASE_URL,\"/secrets\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});const data=await response.json();return data;}catch(error){return error;}}","map":{"version":3,"names":["BASE_URL","process","env","NODE_ENV","console","log","registerUser","email","password","requestBody","response","fetch","concat","method","headers","body","JSON","stringify","data","json","error","loginUser","getSecretsForUser","userId","addSecretForUser","secret","secretInfo"],"sources":["C:/Users/Islom/OneDrive/Desktop/TopSecret/frontend/src/services/api.js"],"sourcesContent":["let BASE_URL = \"\";\r\n\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n    console.log(process.env);\r\n    BASE_URL = \"http://localhost:5000/api\";\r\n  } else if (process.env.NODE_ENV === \"production\") {\r\n    BASE_URL = \"https://topsecret-l2s9.onrender.com\";\r\n  }\r\n\r\nexport async function registerUser(email, password) {\r\n    const requestBody = {\r\n        email: email, \r\n        password: password\r\n    }\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/users/register`, {\r\n            method: 'POST', \r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(requestBody)\r\n        });\r\n        const data = await response.json();\r\n        return data;    \r\n    } catch(error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport async function loginUser(email, password) {\r\n    const requestBody = {\r\n        email: email, \r\n        password: password\r\n    }\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/users/login`, {\r\n            method: 'POST', \r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(requestBody)\r\n        });\r\n        const data = await response.json();\r\n        return data; \r\n    } catch(error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport async function getSecretsForUser(userId) {\r\n    try {\r\n        const response =  await fetch(`${BASE_URL}/secrets/${userId}`);\r\n        const data = await response.json();\r\n        return data;\r\n    } catch(error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport async function addSecretForUser(userId, secret) {\r\n    const requestBody = {\r\n        userId: userId, \r\n        secretInfo: secret \r\n    }\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/secrets`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(requestBody)\r\n        }); \r\n        const data = await response.json();\r\n        return data;\r\n    } catch(error) {\r\n        return error;\r\n    }\r\n}"],"mappings":"AAAA,GAAI,CAAAA,QAAQ,CAAG,EAAE,CAGjB,GAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,aAAa,CAAE,CACxCC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAACC,GAAG,CAAC,CACxBF,QAAQ,CAAG,2BAA2B,CACxC,CAAC,IAAM,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CAChDH,QAAQ,CAAG,qCAAqC,CAClD,CAEF,MAAO,eAAe,CAAAM,YAAYA,CAACC,KAAK,CAAEC,QAAQ,CAAE,CAChD,KAAM,CAAAC,WAAW,CAAG,CAChBF,KAAK,CAAEA,KAAK,CACZC,QAAQ,CAAEA,QACd,CAAC,CACD,GAAI,CACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIZ,QAAQ,oBAAmB,CACvDa,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACR,WAAW,CACpC,CAAC,CAAC,CACF,KAAM,CAAAS,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAD,IAAI,CACf,CAAE,MAAME,KAAK,CAAE,CACX,MAAO,CAAAA,KAAK,CAChB,CACJ,CAEA,MAAO,eAAe,CAAAC,SAASA,CAACd,KAAK,CAAEC,QAAQ,CAAE,CAC7C,KAAM,CAAAC,WAAW,CAAG,CAChBF,KAAK,CAAEA,KAAK,CACZC,QAAQ,CAAEA,QACd,CAAC,CACD,GAAI,CACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIZ,QAAQ,iBAAgB,CACpDa,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACR,WAAW,CACpC,CAAC,CAAC,CACF,KAAM,CAAAS,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAD,IAAI,CACf,CAAE,MAAME,KAAK,CAAE,CACX,MAAO,CAAAA,KAAK,CAChB,CACJ,CAEA,MAAO,eAAe,CAAAE,iBAAiBA,CAACC,MAAM,CAAE,CAC5C,GAAI,CACA,KAAM,CAAAb,QAAQ,CAAI,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIZ,QAAQ,cAAAY,MAAA,CAAYW,MAAM,CAAE,CAAC,CAC9D,KAAM,CAAAL,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAD,IAAI,CACf,CAAE,MAAME,KAAK,CAAE,CACX,MAAO,CAAAA,KAAK,CAChB,CACJ,CAEA,MAAO,eAAe,CAAAI,gBAAgBA,CAACD,MAAM,CAAEE,MAAM,CAAE,CACnD,KAAM,CAAAhB,WAAW,CAAG,CAChBc,MAAM,CAAEA,MAAM,CACdG,UAAU,CAAED,MAChB,CAAC,CACD,GAAI,CACA,KAAM,CAAAf,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIZ,QAAQ,aAAY,CAChDa,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACR,WAAW,CACpC,CAAC,CAAC,CACF,KAAM,CAAAS,IAAI,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAD,IAAI,CACf,CAAE,MAAME,KAAK,CAAE,CACX,MAAO,CAAAA,KAAK,CAChB,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}