{"ast":null,"code":"require('dotenv').config();\nlet BASE_URL;\nif (process.env.NODE_ENV === \"development\") {\n  console.log(process.env);\n  BASE_URL = \"http://localhost:5000/api\";\n} else if (process.env.NODE_ENV === \"production\") {\n  BASE_URL = \"https://topsecret-l2s9.onrender.com\";\n}\nexport async function registerUser(email, password) {\n  const requestBody = {\n    email: email,\n    password: password\n  };\n  try {\n    const response = await fetch(`${BASE_URL}/users/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n}\nexport async function loginUser(email, password) {\n  const requestBody = {\n    email: email,\n    password: password\n  };\n  try {\n    const response = await fetch(`${BASE_URL}/users/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n}\nexport async function getSecretsForUser(userId) {\n  try {\n    const response = await fetch(`${BASE_URL}/secrets/${userId}`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n}\nexport async function addSecretForUser(userId, secret) {\n  const requestBody = {\n    userId: userId,\n    secretInfo: secret\n  };\n  try {\n    const response = await fetch(`${BASE_URL}/secrets`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n}","map":{"version":3,"names":["require","config","BASE_URL","process","env","NODE_ENV","console","log","registerUser","email","password","requestBody","response","fetch","method","headers","body","JSON","stringify","data","json","error","loginUser","getSecretsForUser","userId","addSecretForUser","secret","secretInfo"],"sources":["C:/Users/Islom/OneDrive/Desktop/TopSecret/frontend/src/services/api.js"],"sourcesContent":["require('dotenv').config();\r\n\r\n\r\nlet BASE_URL;\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n    console.log(process.env);\r\n    BASE_URL = \"http://localhost:5000/api\";\r\n  } else if (process.env.NODE_ENV === \"production\") {\r\n    BASE_URL = \"https://topsecret-l2s9.onrender.com\";\r\n  }\r\n\r\nexport async function registerUser(email, password) {\r\n    const requestBody = {\r\n        email: email, \r\n        password: password\r\n    }\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/users/register`, {\r\n            method: 'POST', \r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(requestBody)\r\n        });\r\n        const data = await response.json();\r\n        return data;    \r\n    } catch(error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport async function loginUser(email, password) {\r\n    const requestBody = {\r\n        email: email, \r\n        password: password\r\n    }\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/users/login`, {\r\n            method: 'POST', \r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(requestBody)\r\n        });\r\n        const data = await response.json();\r\n        return data; \r\n    } catch(error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport async function getSecretsForUser(userId) {\r\n    try {\r\n        const response =  await fetch(`${BASE_URL}/secrets/${userId}`);\r\n        const data = await response.json();\r\n        return data;\r\n    } catch(error) {\r\n        return error;\r\n    }\r\n}\r\n\r\nexport async function addSecretForUser(userId, secret) {\r\n    const requestBody = {\r\n        userId: userId, \r\n        secretInfo: secret \r\n    }\r\n    try {\r\n        const response = await fetch(`${BASE_URL}/secrets`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(requestBody)\r\n        }); \r\n        const data = await response.json();\r\n        return data;\r\n    } catch(error) {\r\n        return error;\r\n    }\r\n}"],"mappings":"AAAAA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;AAG1B,IAAIC,QAAQ;AAEZ,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;EACxCC,OAAO,CAACC,GAAG,CAACJ,OAAO,CAACC,GAAG,CAAC;EACxBF,QAAQ,GAAG,2BAA2B;AACxC,CAAC,MAAM,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EAChDH,QAAQ,GAAG,qCAAqC;AAClD;AAEF,OAAO,eAAeM,YAAYA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAChD,MAAMC,WAAW,GAAG;IAChBF,KAAK,EAAEA,KAAK;IACZC,QAAQ,EAAEA;EACd,CAAC;EACD,IAAI;IACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEX,QAAS,iBAAgB,EAAE;MACvDY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IACpC,CAAC,CAAC;IACF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAME,KAAK,EAAE;IACX,OAAOA,KAAK;EAChB;AACJ;AAEA,OAAO,eAAeC,SAASA,CAACb,KAAK,EAAEC,QAAQ,EAAE;EAC7C,MAAMC,WAAW,GAAG;IAChBF,KAAK,EAAEA,KAAK;IACZC,QAAQ,EAAEA;EACd,CAAC;EACD,IAAI;IACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEX,QAAS,cAAa,EAAE;MACpDY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IACpC,CAAC,CAAC;IACF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAME,KAAK,EAAE;IACX,OAAOA,KAAK;EAChB;AACJ;AAEA,OAAO,eAAeE,iBAAiBA,CAACC,MAAM,EAAE;EAC5C,IAAI;IACA,MAAMZ,QAAQ,GAAI,MAAMC,KAAK,CAAE,GAAEX,QAAS,YAAWsB,MAAO,EAAC,CAAC;IAC9D,MAAML,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAME,KAAK,EAAE;IACX,OAAOA,KAAK;EAChB;AACJ;AAEA,OAAO,eAAeI,gBAAgBA,CAACD,MAAM,EAAEE,MAAM,EAAE;EACnD,MAAMf,WAAW,GAAG;IAChBa,MAAM,EAAEA,MAAM;IACdG,UAAU,EAAED;EAChB,CAAC;EACD,IAAI;IACA,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEX,QAAS,UAAS,EAAE;MAChDY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IACpC,CAAC,CAAC;IACF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAME,KAAK,EAAE;IACX,OAAOA,KAAK;EAChB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}